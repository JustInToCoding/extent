{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","setPoints","polygon","setPolygon","position","geometry","coordinates","first","className","Map","center","zoom","TileLayer","attribution","url","GeoJSON","data","type","id","onChange","file2","reader","FileReader","addEventListener","geoJson","shp","parseShp","result","points","map","item","concaveman","target","files","readAsArrayBuffer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUA2DeA,MAnDf,WAAgB,IAAD,EACeC,qBADf,mBACEC,GADF,aAEiBD,qBAFjB,mBAENE,EAFM,KAEGC,EAFH,KA8BTC,EAAW,CAAC,YAAa,YAC7B,GAAIF,EAAS,CAAC,IAAD,cACaA,EAAQG,SAASC,YAAY,GAAG,GAD7C,GACJC,EADI,KAEXH,EAAW,CAFA,KAESG,GAGtB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAKC,OAAQN,EAAUO,KAAM,GAAIH,UAAU,eACzC,kBAACI,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAGLZ,GAAW,kBAACa,EAAA,EAAD,CAASC,KAAMd,KAE7B,2BAAOe,KAAK,OAAOC,GAAG,QAAQC,SA1Cf,SAAAC,GACjB,IAAIC,EAAS,IAAIC,WAEjBD,EAAOE,iBACL,QACA,WACE,IAAMC,EAAUC,IAAIC,SAASL,EAAOM,QACpC1B,EAAUuB,GACV,IAAMI,EAASJ,EAAQK,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,eAClCJ,EAAU6B,IAAWH,GAQ3BzB,EAPuB,CACrBc,KAAM,UACNZ,SAAU,CACRY,KAAM,UACNX,YAAa,CAACJ,SAKpB,GAEEkB,EAAMY,OAAOC,OACfZ,EAAOa,kBAAkBd,EAAMY,OAAOC,MAAM,SCtB9BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.78a71951.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Map, TileLayer, GeoJSON } from \"react-leaflet\";\nimport shp from \"shpjs\";\nimport concaveman from \"concaveman\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [points, setPoints] = useState();\n  const [polygon, setPolygon] = useState();\n\n  const handleFile = file2 => {\n    var reader = new FileReader();\n\n    reader.addEventListener(\n      \"load\",\n      () => {\n        const geoJson = shp.parseShp(reader.result);\n        setPoints(geoJson);\n        const points = geoJson.map(item => item.coordinates);\n        const polygon = concaveman(points);\n        const geoJsonPolygon = {\n          type: \"Feature\",\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [polygon]\n          }\n        };\n        setPolygon(geoJsonPolygon);\n      },\n      false\n    );\n    if (file2.target.files) {\n      reader.readAsArrayBuffer(file2.target.files[0]);\n    }\n  };\n\n  let position = [51.84276079, 5.18380148];\n  if (polygon) {\n    const [first, second] = polygon.geometry.coordinates[0][0];\n    position = [second, first];\n  }\n\n  return (\n    <div className=\"map\">\n      <Map center={position} zoom={15} className=\"leaflet-map\">\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {/* {points && <GeoJSON data={points} />} */}\n        {polygon && <GeoJSON data={polygon} />}\n      </Map>\n      <input type=\"file\" id=\"input\" onChange={handleFile}></input>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}